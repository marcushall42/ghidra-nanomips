define endian=$(ENDIAN);

define alignment=2;

define space ram        type=ram_space size=4 default;
define space register   type=register_space size=4;

define register offset=0 size=4 [
  zero at t4 t5 a0 a1 a2 a3
    a4 a5 a6 a7 t0 t1 t2 t3
    s0 s1 s2 s3 s4 s5 s6 s7
    t8 t9 k0 k1 gp sp fp ra
    pc
# Exception and Debug pcs, Status
       epc depc Status
];

# Instructions are 2, 4, or 6 bytes long.  We consider 2-byte "narrow"
# instructions and 4-byte "instructions" that may have an additional 2-byte
# upper address portion appended.
#
# The manual uses big-endian bit numbering.  For 16-bit instructions, this
# fits ghidra's normal big/little endian organization.  However, for 32-bit
# instructions, nanoMIPS always stores the big word first (in big or little
# ordering), and then the little word following that.  So, we represent this
# in ghidra as two 16-bit parts and use the ';' separator between the parts.
# The 48-bit instructions carry this still further with a third part following
# (although we treat it as a 32-bit instruction with an additional 16-bit
# data attached)

# narrow instruction
define token ins16(16)
    n_op    = (10,15)
    rtz3    = (7,9)
    rt3     = (7,9)
    rs3     = (4,6)
    rd3     = (1,3)
    rtz4x   = (5,9)
    rt4x    = (5,9)
    rsz4x   = (0,4)
    rs4x    = (0,4)
    rd2x2   = (3,8)
    rd2x1   = (3,8)
    n_rt    = (5,9)
    n_rs    = (0,4)
    rt1     = (9,9)
    rt1_1   = (9,9)
    rt1_2   = (9,9)
    rt1_3   = (9,9)
    rt1_4   = (9,9)
    rt1_5   = (9,9)
    rt1_6   = (9,9)
    rt1_7   = (9,9)
    rt1_8   = (9,9)
    rt1_9   = (9,9)
    rt1_10  = (9,9)
    rt1_11  = (9,9)
    rt1_12  = (9,9)
    rt1_13  = (9,9)
    rt1_14  = (9,9)
    n8      = (8,8)
    n7_9    = (7,9)
    n6      = (6,6)
    n5_9    = (5,9)
    n4_7    = (4,7)
    n4_6    = (4,6)
    n4s     = (4,4) signed
    n3_9    = (3,9)
    n3_4    = (3,4)
    n3      = (3,3)
    n2_9    = (2,9)
    n2_3    = (2,3)
    n1_9    = (1,9)
    n1_6    = (1,6)
    n1_2    = (1,2)
    n1      = (1,1)
    n0_6    = (0,6)
    n0_5    = (0,5)
    n0_4    = (0,4)
    n0_3    = (0,3)
    n0_2    = (0,2)
    n0_1    = (0,1)
    n0      = (0,0)
    n0s     = (0,0) signed
;

# Regular 32-bit instruction, high word.
#  bit numbers are 16 less than fields in the manual
define token ins32h(16)
    i_op    = (10,15) # 26,31
    op1     = ( 5, 9) # 21,25
    rt      = ( 5, 9) # 21,25
    rt_1    = ( 5, 9) # 21,25
    rt_2    = ( 5, 9) # 21,25
    rt_3    = ( 5, 9) # 21,25
    rt_4    = ( 5, 9) # 21,25
    rt_5    = ( 5, 9) # 21,25
    rt_6    = ( 5, 9) # 21,25
    rt_7    = ( 5, 9) # 21,25
    rt_8    = ( 5, 9) # 21,25
    rt_9    = ( 5, 9) # 21,25
    rt_10   = ( 5, 9) # 21,25
    rt_11   = ( 5, 9) # 21,25
    rt_12   = ( 5, 9) # 21,25
    rt_13   = ( 5, 9) # 21,25
    rt_14   = ( 5, 9) # 21,25
    rs      = ( 0, 4) # 16,20
    rd1     = ( 8, 8) # 24,24
    i_rtz4x = ( 5, 9) # 21,25
    c0s     = ( 0, 4) # 16,20
    i26     = (10,10) # 26,26
    i25     = ( 9, 9) # 25,25
    i21_25  = ( 5, 9) # 21,25
    i20     = ( 4, 4) # 20,20
    i19_25  = ( 3, 9) # 19,25
    i18_25  = ( 2, 9) # 18,25
    i18_20  = ( 2, 4) # 18,20
    i17     = ( 1, 1) # 17,17
    i16_25  = ( 0, 9) # 16,25
    i16_24  = ( 0, 8) # 16,24
    i16_20  = ( 0, 4) # 16,20
    i16_19  = ( 0, 3) # 16,19
    i16_18  = ( 0, 2) # 16,18
    i16_17  = ( 0, 1) # 16,17
    i16     = ( 0, 0) # 16,16
    xh      = (0,0) # Ficticous bit to force high word into pattern
;
define token ins32l(16)
    rd      = (11,15)
    ru      = (3,7)
    i15s    = (15,15) signed
    i14_15  = (14,15)
    i12_15  = (12,15)
    i12_14  = (12,14)
    i11_15  = (11,15)
    i10     = (10,10)
    i9_10   = (9,10)
    i9      = (9,9)
    i8_14   = (8,14)
    i8_11   = (8,11)
    i8      = (8,8)
    i7_10   = (7,10)
    i7      = (7,7)
    i6_10   = (6,10)
    i6      = (6,6)
    i5_8    = (5,8)
    i5      = (5,5)
    i4      = (4,4)
    i3_11   = (3,11)
    i3      = (3,3)
    i2_15   = (2,15)
    i2_11   = (2,11)
    i2_7    = (2,7)
    i2      = (2,2)
    i1_15   = (1,15)
    i1_13   = (1,13)
    i1_10   = (1,10)
    i1      = (1,1)
    i0_15   = (0,15)
    i0_12   = (0,12)
    i0_11   = (0,11)
    i0_10   = (0,10)
    i0_9    = (0,9)
    i0_8    = (0,8)
    i0_7    = (0,7)
    i0_5    = (0,5)
    i0_4    = (0,4)
    i0_2    = (0,2)
    i0_1    = (0,1)
    i0      = (0,0)
    i0s     = (0,0) signed
    xl      = (0,0) # Ficticous bit to force low word into pattern
;
define token ins48ext(16)
    e0_15s  = (0,15) signed
;

#imm16: u1 is ; u1 { export u1; }

attach variables [ rs n_rs rt n_rt rd ru ] [
  zero at t4 t5 a0 a1 a2 a3
    a4 a5 a6 a7 t0 t1 t2 t3
    s0 s1 s2 s3 s4 s5 s6 s7
    t8 t9 k0 k1 gp sp fp ra
];
attach variables [ rs3 rt3 rd3 ] [
    s0 s1 s2 s3 a0 a1 a2 a3
];
attach variables [ rtz3 ] [
    zero s1 s2 s3 a0 a1 a2 a3
];
attach variables [ rs4x rt4x ] [ # 4 bits with ignored bit inserted 3.210
    a4 a5 a6 a7 a0 a1 a2 a3 a4 a5 a6 a7 a0 a1 a2 a3
    s0 s1 s2 s3 s4 s5 s6 s7 s0 s1 s2 s3 s4 s5 s6 s7
];
attach variables [ rsz4x rtz4x i_rtz4x ] [ # similar, but $3 == zero
    a4 a5 a6 zero a0 a1 a2 a3 a4 a5 a6 a7 a0 a1 a2 a3
    s0 s1 s2 s3 s4 s5 s6 s7 s0 s1 s2 s3 s4 s5 s6 s7
];
attach variables [ rd2x1 ] [ # a0, a1, a2, a3; but bits are b0 x x x x b1
 a0 a2 a0 a2 a0 a2 a0 a2 a0 a2 a0 a2 a0 a2 a0 a2 # 00 10 00 10 ...
 a0 a2 a0 a2 a0 a2 a0 a2 a0 a2 a0 a2 a0 a2 a0 a2 # 00 10 00 10 ...
 a1 a3 a1 a3 a1 a3 a1 a3 a1 a3 a1 a3 a1 a3 a1 a3 # 01 11 01 11 ...
 a1 a3 a1 a3 a1 a3 a1 a3 a1 a3 a1 a3 a1 a3 a1 a3 # 01 11 01 11 ...
];
attach variables [ rd2x2 ] [ # a1, a2, a3, a4; but bits are b0 x x x x b1
 a1 a3 a1 a3 a1 a3 a1 a3 a1 a3 a1 a3 a1 a3 a1 a3 # 00 10 00 10 ...
 a1 a3 a1 a3 a1 a3 a1 a3 a1 a3 a1 a3 a1 a3 a1 a3 # 00 10 00 10 ...
 a2 a4 a2 a4 a2 a4 a2 a4 a2 a4 a2 a4 a2 a4 a2 a4 # 01 11 01 11 ...
 a2 a4 a2 a4 a2 a4 a2 a4 a2 a4 a2 a4 a2 a4 a2 a4 # 01 11 01 11 ...
];
attach variables [ rd1 ] [ a0 a1 ];
attach variables [ rt1 ] [ fp ra ];

# Additiona mappings of registers rt and rt1 used for lwm/restore/save/swm.
# rt_X and rt1_X are mappings of rt/rt1 + X, wrapping to s0 after ra.
attach variables [ rt_1 ] [
    at t4 t5 a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 s0
    s1 s2 s3 s4 s5 s6 s7 t8 t9 k0 k1 gp sp fp ra s0
];
attach variables [ rt_2 ] [
    t4 t5 a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 s0 s1
    s2 s3 s4 s5 s6 s7 t8 t9 k0 k1 gp sp fp ra s0 s1
];
attach variables [ rt_3 ] [
    t5 a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 s0 s1 s2
    s3 s4 s5 s6 s7 t8 t9 k0 k1 gp sp fp ra s0 s1 s2
];
attach variables [ rt_4 ] [
    a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 s0 s1 s2 s3
    s4 s5 s6 s7 t8 t9 k0 k1 gp sp fp ra s0 s1 s2 s3
];
attach variables [ rt_5 ] [
    a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 s0 s1 s2 s3 s4
    s5 s6 s7 t8 t9 k0 k1 gp sp fp ra s0 s1 s2 s3 s4
];
attach variables [ rt_6 ] [
    a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 s0 s1 s2 s3 s4 s5
    s6 s7 t8 t9 k0 k1 gp sp fp ra s0 s1 s2 s3 s4 s5
];
attach variables [ rt_7 ] [
    a3 a4 a5 a6 a7 t0 t1 t2 t3 s0 s1 s2 s3 s4 s5 s6
    s7 t8 t9 k0 k1 gp sp fp ra s0 s1 s2 s3 s4 s5 s6
];
attach variables [ rt_8 ] [
    a4 a5 a6 a7 t0 t1 t2 t3 s0 s1 s2 s3 s4 s5 s6 s7
    t8 t9 k0 k1 gp sp fp ra s0 s1 s2 s3 s4 s5 s6 s7
];
attach variables [ rt_9 ] [
    a5 a6 a7 t0 t1 t2 t3 s0 s1 s2 s3 s4 s5 s6 s7 t8
    t9 k0 k1 gp sp fp ra s0 s1 s2 s3 s4 s5 s6 s7 t8
];
attach variables [ rt_10 ] [
    a6 a7 t0 t1 t2 t3 s0 s1 s2 s3 s4 s5 s6 s7 t8 t9
    k0 k1 gp sp fp ra s0 s1 s2 s3 s4 s5 s6 s7 t8 t9
];
attach variables [ rt_11 ] [
    a7 t0 t1 t2 t3 s0 s1 s2 s3 s4 s5 s6 s7 t8 t9 k0
    k1 gp sp fp ra s0 s1 s2 s3 s4 s5 s6 s7 t8 t9 k0
];
attach variables [ rt_12 ] [
    t0 t1 t2 t3 s0 s1 s2 s3 s4 s5 s6 s7 t8 t9 k0 k1
    gp sp fp ra s0 s1 s2 s3 s4 s5 s6 s7 t8 t9 k0 k1
];
attach variables [ rt_13 ] [
    t1 t2 t3 s0 s1 s2 s3 s4 s5 s6 s7 t8 t9 k0 k1 gp
    sp fp ra s0 s1 s2 s3 s4 s5 s6 s7 t8 t9 k0 k1 gp
];
attach variables [ rt_14 ] [
    t2 t3 s0 s1 s2 s3 s4 s5 s6 s7 t8 t9 k0 k1 gp sp
    fp ra s0 s1 s2 s3 s4 s5 s6 s7 t8 t9 k0 k1 gp sp
];
attach variables [ rt1_1 ] [ ra s0 ];  # rt1 + 1
attach variables [ rt1_2 ] [ s0 s1];  # rt1 + 2
attach variables [ rt1_3 ] [ s1 s2 ];  # rt1 + 3
attach variables [ rt1_4 ] [ s2 s3 ];  # rt1 + 4
attach variables [ rt1_5 ] [ s3 s4 ];  # rt1 + 5
attach variables [ rt1_6 ] [ s4 s5 ];  # rt1 + 6
attach variables [ rt1_7 ] [ s5 s6 ];  # rt1 + 7
attach variables [ rt1_8 ] [ s6 s7 ];  # rt1 + 8
attach variables [ rt1_9 ] [ s7 t8 ];  # rt1 + 9
attach variables [ rt1_10 ] [ t8 t9 ];  # rt1 + 10
attach variables [ rt1_11 ] [ t9 k0 ];  # rt1 + 11
attach variables [ rt1_12 ] [ k0 k1 ];  # rt1 + 12
attach variables [ rt1_13 ] [ k1 gp ];  # rt1 + 13
attach variables [ rt1_14 ] [ gp sp ];  # rt1 + 14

define pcodeop breakpoint;
define pcodeop debug;
define pcodeop exception;
define pcodeop syscall;
define pcodeop trap;
define pcodeop cacheOp;
#define pcodeop disableInterrupts;
#define pcodeop enableInterrupts;
define pcodeop disableProcessor;
define pcodeop enableProcessor;
define pcodeop crc32;
define pcodeop countLeadingOnes;
define pcodeop countLeadingZeros;
define pcodeop read_cp0_register;
define pcodeop write_cp0_register;
define pcodeop pause;
define pcodeop read_hw;
