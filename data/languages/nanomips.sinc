define endian=$(ENDIAN);

define alignment=2;

define space ram        type=ram_space size=4 default;
define space register   type=register_space size=4;

define register offset=0 size=4 [
  zero at t4 t5 a0 a1 a2 a3
    a4 a5 a6 a7 t0 t1 t2 t3
    s0 s1 s2 s3 s4 s5 s6 s7
    t8 t9 k0 k1 gp sp fp ra
    pc
# Exception and Debug pcs, Status
       epc depc Status
];

# Instructions are 2, 4, or 6 bytes long.  We consider 2-byte "narrow"
# instructions and 4-byte "instructions" that may have an additional 2-byte
# upper address portion appended.
#
# The manual numbers the bits as a 16, 32, or 48 bit long instruction.
# 16-bit instructions are stored:
#  byte    little  big
#  0:      0-7     8-15
#  1:      8-15    0-7
#
# 32-bit instructions are stored:
#  byte    little  big      ghidra-little
#  0:      16-23   24-31    0-7
#  1:      24-31   16-23    8-15
#  2:      0-7     8-15     16-23
#  3:      8-15    0-7      24-31
#
# So, the first word is the high word, regardless of the byte order.
# This is also the word that contains the opcode, which decodes the
# instruction length.  So, in the manual the opcode is in bits 10-15
# of a 2-byte instruction or 26-31 of a 4-byte instruction, they occur
# in the high byte of the first 2 bytes..
#
# Because ghidra considers a 4-byte little endian instruction to be
# ordered with bits strictly little-endian, we map the token bits
# for little-endian between the two half-words.
@if ENDIAN == "big"
@define I0  0
@define I1  1
@define I2  2
@define I3  3
@define I4  4
@define I5  5
@define I6  6
@define I7  7
@define I8  8
@define I9  9
@define I10 10
@define I11 11
@define I12 12
@define I13 13
@define I14 14
@define I15 15
@define I16 16
@define I17 17
@define I18 18
@define I19 19
@define I20 20
@define I21 21
@define I22 22
@define I23 23
@define I24 24
@define I25 25
@define I26 26
@define I27 27
@define I28 28
@define I29 29
@define I30 30
@define I31 31
@else
@define I0  16
@define I1  17
@define I2  18
@define I3  19
@define I4  20
@define I5  21
@define I6  22
@define I7  23
@define I8  24
@define I9  25
@define I10 26
@define I11 27
@define I12 28
@define I13 29
@define I14 30
@define I15 31
@define I16 0
@define I17 1
@define I18 2
@define I19 3
@define I20 4
@define I21 5
@define I22 6
@define I23 7
@define I24 8
@define I25 9
@define I26 10
@define I27 11
@define I28 12
@define I29 13
@define I30 14
@define I31 15
@endif

# narrow instruction
define token ins16(16)
    n_op    = (10,15)
    rtz3    = (7,9)
    rt3     = (7,9)
    rs3     = (4,6)
    rd3     = (1,3)
    rtz4x   = (5,9)
    rt4x    = (5,9)
    rsz4x   = (0,4)
    rs4x    = (0,4)
    rd2x2   = (3,8)
    rd2x1   = (3,8)
    n_rt    = (5,9)
    n_rs    = (0,4)
    rt1     = (9,9)
    rt1_1   = (9,9)
    rt1_2   = (9,9)
    rt1_3   = (9,9)
    rt1_4   = (9,9)
    rt1_5   = (9,9)
    rt1_6   = (9,9)
    rt1_7   = (9,9)
    rt1_8   = (9,9)
    rt1_9   = (9,9)
    rt1_10  = (9,9)
    rt1_11  = (9,9)
    rt1_12  = (9,9)
    rt1_13  = (9,9)
    rt1_14  = (9,9)
    n8      = (8,8)
    n7_9    = (7,9)
    n6      = (6,6)
    n5_9    = (5,9)
    n4_7    = (4,7)
    n4_6    = (4,6)
    n4s     = (4,4) signed
    n3_9    = (3,9)
    n3_4    = (3,4)
    n3      = (3,3)
    n2_9    = (2,9)
    n2_3    = (2,3)
    n1_9    = (1,9)
    n1_6    = (1,6)
    n1_2    = (1,2)
    n1      = (1,1)
    n0_6    = (0,6)
    n0_5    = (0,5)
    n0_4    = (0,4)
    n0_3    = (0,3)
    n0_2    = (0,2)
    n0_1    = (0,1)
    n0      = (0,0)
    n0s     = (0,0) signed
;

# Regular 32-bit instruction (use $I defines from above)
define token ins32(32)
    i_op    = ($(I26),$(I31))
    op1     = ($(I21),$(I25))
    rt      = ($(I21),$(I25))
    rt_1    = ($(I21),$(I25))
    rt_2    = ($(I21),$(I25))
    rt_3    = ($(I21),$(I25))
    rt_4    = ($(I21),$(I25))
    rt_5    = ($(I21),$(I25))
    rt_6    = ($(I21),$(I25))
    rt_7    = ($(I21),$(I25))
    rt_8    = ($(I21),$(I25))
    rt_9    = ($(I21),$(I25))
    rt_10   = ($(I21),$(I25))
    rt_11   = ($(I21),$(I25))
    rt_12   = ($(I21),$(I25))
    rt_13   = ($(I21),$(I25))
    rt_14   = ($(I21),$(I25))
    rs      = ($(I16),$(I20))
    i_rt3   = ($(I23),$(I25))
    i_rs3   = ($(I20),$(I22))
    rd1     = ($(I24),$(I24))
    i_rtz4x = ($(I21),$(I25))
    c0s     = ($(I16),$(I20))
    i26     = ($(I26),$(I26))
    i25     = ($(I25),$(I25))
    i21_25  = ($(I21),$(I25))
    i20     = ($(I20),$(I20))
    i19_25  = ($(I19),$(I25))
    i19     = ($(I19),$(I19))
    i18_25  = ($(I18),$(I25))
    i18_20  = ($(I18),$(I20))
    i17     = ($(I17),$(I17))
    i16_25  = ($(I16),$(I25))
    i16_24  = ($(I16),$(I24))
    i16_20  = ($(I16),$(I20))
    i16_19  = ($(I16),$(I19))
    i16_18  = ($(I16),$(I18))
    i16_17  = ($(I16),$(I17))
    i16     = ($(I16),$(I16))
    rd      = ($(I11),$(I15))
    ru      = ($(I3),$(I7))
    i15s    = ($(I15),$(I15)) signed
    i14_15  = ($(I14),$(I15))
    i12_15  = ($(I12),$(I15))
    i12_14  = ($(I12),$(I14))
    i11_15  = ($(I11),$(I15))
    i10     = ($(I10),$(I10))
    i9_10   = ($(I9),$(I10))
    i8_14   = ($(I8),$(I14))
    i8_11   = ($(I8),$(I11))
    i7_10   = ($(I7),$(I10))
    i6_10   = ($(I6),$(I10))
    i6      = ($(I6),$(I6))
    i5_8    = ($(I5),$(I8))
    i5      = ($(I5),$(I5))
    i3_11   = ($(I3),$(I11))
    i2_15   = ($(I2),$(I15))
    i2_11   = ($(I2),$(I11))
    i2_7    = ($(I2),$(I7))
    i1_15   = ($(I1),$(I15))
    i1_13   = ($(I1),$(I13))
    i1_10   = ($(I1),$(I10))
    i1      = ($(I1),$(I1))
    i0_15   = ($(I0),$(I15))
    i0_12   = ($(I0),$(I12))
    i0_11   = ($(I0),$(I11))
    i0_10   = ($(I0),$(I10))
    i0_9    = ($(I0),$(I9))
    i0_8    = ($(I0),$(I8))
    i0_7    = ($(I0),$(I7))
    i0_5    = ($(I0),$(I5))
    i0_4    = ($(I0),$(I4))
    i0_2    = ($(I0),$(I2))
    i0_1    = ($(I0),$(I1))
    i0      = ($(I0),$(I0))
    i0s     = ($(I0),$(I0)) signed
;
define token ins48ext(16)
    e0_15s  = (0,15) signed
;

#imm16: u1 is ; u1 { export u1; }

attach variables [ rs n_rs rt n_rt rd ru ] [
  zero at t4 t5 a0 a1 a2 a3
    a4 a5 a6 a7 t0 t1 t2 t3
    s0 s1 s2 s3 s4 s5 s6 s7
    t8 t9 k0 k1 gp sp fp ra
];
attach variables [ rs3 i_rs3 rt3 i_rt3 rd3 ] [
    s0 s1 s2 s3 a0 a1 a2 a3
];
attach variables [ rtz3 ] [
    zero s1 s2 s3 a0 a1 a2 a3
];
attach variables [ rs4x rt4x ] [ # 4 bits with ignored bit inserted 3.210
    a4 a5 a6 a7 a0 a1 a2 a3 a4 a5 a6 a7 a0 a1 a2 a3
    s0 s1 s2 s3 s4 s5 s6 s7 s0 s1 s2 s3 s4 s5 s6 s7
];
attach variables [ rsz4x rtz4x i_rtz4x ] [ # similar, but $3 == zero
    a4 a5 a6 zero a0 a1 a2 a3 a4 a5 a6 a7 a0 a1 a2 a3
    s0 s1 s2 s3 s4 s5 s6 s7 s0 s1 s2 s3 s4 s5 s6 s7
];
attach variables [ rd2x1 ] [ # a0, a1, a2, a3; but bits are b0 x x x x b1
 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 # b0=0 b1=0
 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 # b0=0 b1=1
 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 # b0=1 b1=0
 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 # b0=1 b1=1
];
attach variables [ rd2x2 ] [ # a1, a2, a3, a4; but bits are b0 x x x x b1
 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 a1 # b0=0 b1=0
 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 # b0=0 b1=1
 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 a2 # b0=1 b1=0
 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 # b0=1 b1=1
];
attach variables [ rd1 ] [ a0 a1 ];
attach variables [ rt1 ] [ fp ra ];

# Additiona mappings of registers rt and rt1 used for lwm/restore/save/swm.
# rt_X and rt1_X are mappings of rt/rt1 + X, wrapping to s0 after ra.
attach variables [ rt_1 ] [
    at t4 t5 a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 s0
    s1 s2 s3 s4 s5 s6 s7 t8 t9 k0 k1 gp sp fp ra s0
];
attach variables [ rt_2 ] [
    t4 t5 a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 s0 s1
    s2 s3 s4 s5 s6 s7 t8 t9 k0 k1 gp sp fp ra s0 s1
];
attach variables [ rt_3 ] [
    t5 a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 s0 s1 s2
    s3 s4 s5 s6 s7 t8 t9 k0 k1 gp sp fp ra s0 s1 s2
];
attach variables [ rt_4 ] [
    a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 s0 s1 s2 s3
    s4 s5 s6 s7 t8 t9 k0 k1 gp sp fp ra s0 s1 s2 s3
];
attach variables [ rt_5 ] [
    a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 s0 s1 s2 s3 s4
    s5 s6 s7 t8 t9 k0 k1 gp sp fp ra s0 s1 s2 s3 s4
];
attach variables [ rt_6 ] [
    a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 s0 s1 s2 s3 s4 s5
    s6 s7 t8 t9 k0 k1 gp sp fp ra s0 s1 s2 s3 s4 s5
];
attach variables [ rt_7 ] [
    a3 a4 a5 a6 a7 t0 t1 t2 t3 s0 s1 s2 s3 s4 s5 s6
    s7 t8 t9 k0 k1 gp sp fp ra s0 s1 s2 s3 s4 s5 s6
];
attach variables [ rt_8 ] [
    a4 a5 a6 a7 t0 t1 t2 t3 s0 s1 s2 s3 s4 s5 s6 s7
    t8 t9 k0 k1 gp sp fp ra s0 s1 s2 s3 s4 s5 s6 s7
];
attach variables [ rt_9 ] [
    a5 a6 a7 t0 t1 t2 t3 s0 s1 s2 s3 s4 s5 s6 s7 t8
    t9 k0 k1 gp sp fp ra s0 s1 s2 s3 s4 s5 s6 s7 t8
];
attach variables [ rt_10 ] [
    a6 a7 t0 t1 t2 t3 s0 s1 s2 s3 s4 s5 s6 s7 t8 t9
    k0 k1 gp sp fp ra s0 s1 s2 s3 s4 s5 s6 s7 t8 t9
];
attach variables [ rt_11 ] [
    a7 t0 t1 t2 t3 s0 s1 s2 s3 s4 s5 s6 s7 t8 t9 k0
    k1 gp sp fp ra s0 s1 s2 s3 s4 s5 s6 s7 t8 t9 k0
];
attach variables [ rt_12 ] [
    t0 t1 t2 t3 s0 s1 s2 s3 s4 s5 s6 s7 t8 t9 k0 k1
    gp sp fp ra s0 s1 s2 s3 s4 s5 s6 s7 t8 t9 k0 k1
];
attach variables [ rt_13 ] [
    t1 t2 t3 s0 s1 s2 s3 s4 s5 s6 s7 t8 t9 k0 k1 gp
    sp fp ra s0 s1 s2 s3 s4 s5 s6 s7 t8 t9 k0 k1 gp
];
attach variables [ rt_14 ] [
    t2 t3 s0 s1 s2 s3 s4 s5 s6 s7 t8 t9 k0 k1 gp sp
    fp ra s0 s1 s2 s3 s4 s5 s6 s7 t8 t9 k0 k1 gp sp
];
attach variables [ rt1_1 ] [ ra s0 ];  # rt1 + 1
attach variables [ rt1_2 ] [ s0 s1];  # rt1 + 2
attach variables [ rt1_3 ] [ s1 s2 ];  # rt1 + 3
attach variables [ rt1_4 ] [ s2 s3 ];  # rt1 + 4
attach variables [ rt1_5 ] [ s3 s4 ];  # rt1 + 5
attach variables [ rt1_6 ] [ s4 s5 ];  # rt1 + 6
attach variables [ rt1_7 ] [ s5 s6 ];  # rt1 + 7
attach variables [ rt1_8 ] [ s6 s7 ];  # rt1 + 8
attach variables [ rt1_9 ] [ s7 t8 ];  # rt1 + 9
attach variables [ rt1_10 ] [ t8 t9 ];  # rt1 + 10
attach variables [ rt1_11 ] [ t9 k0 ];  # rt1 + 11
attach variables [ rt1_12 ] [ k0 k1 ];  # rt1 + 12
attach variables [ rt1_13 ] [ k1 gp ];  # rt1 + 13
attach variables [ rt1_14 ] [ gp sp ];  # rt1 + 14

define pcodeop breakpoint;
define pcodeop debug;
define pcodeop exception;
define pcodeop syscall;
define pcodeop trap;
define pcodeop cacheOp;
#define pcodeop disableInterrupts;
#define pcodeop enableInterrupts;
define pcodeop disableProcessor;
define pcodeop enableProcessor;
define pcodeop crc32;
define pcodeop countLeadingOnes;
define pcodeop countLeadingZeros;
define pcodeop read_cp0_register;
define pcodeop write_cp0_register;
define pcodeop pause;
define pcodeop read_hw;
define pcodeop rotx;
